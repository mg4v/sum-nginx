NGINX
-----

---------
Об NGINX:
---------
2004 г. Сергей Сысоев
Высокая производительность

Огромное количество модулей.

Обратный прокси сервер, web-server, балансировщик.

----------------
NGINX vs APACHE:
----------------
A:
	- Режим preform по умолчанию:
		определенное количество процессов - каждый обрабатывает один запрос за единицу времени;	
	- Работает с серверными языками программирования;	
	- При каждом получении запроса запускает модули серверных языков программирования;
	- Прожорлив;

N:
	- Обрабатывает запросы асинхронно:
		Т. е. может обрабатывать несколько запросов одновременно.
		Количество одновременных запросов зависит от доступных процессу nginx системных ресурсов;	
	- Работает только со статическими ресурсами;
	- Не может встраивать серверные языки программирования в свои процессы.
		Т. е. все запросы к динамическому контенту должны выполнятся сторонними процессами
			(напр.: php-fpm), а затем результат передается через обратный прокси клиенту
			через nginx;
	- Менее прожорлив;

--------------------------------------------
Установка nginx с помощью менеджера пакетов:
-------------------------------------------- 

cat /etc/lsb-release			#  просмотреть сведения об операционной системе;

sudo apt install nginx			#  локальная установка nginix на deb системы;
sudo yum install epel-release		# установка репозитория CENTOS, содержащего пакеты nginx;
sudo yum install nginx			#  локальная установка nginix на CENTOS;

nginx -v 				# просмотр версии;
 IP_host			# просмотр запущенной версии

nginx -t					# проверка конфигурационных файлов nginx на наличие ошибок 

systemctl status nginx			# проверка статуса nginx;
-//- enable -//-				# включение nginx в автозагрузку;
-//- start -//-				# запуск nginx;
nginx					# просто запуск nginx;
-//-  -//- reload 			# перезапуск сервиса - например для пересчета конфигураций и обновления версии.
						Сначала считывается конфигурация - если есть ошибки - сервис остается работать со старыми настройками;
-//-  -//- restart			# перезапуск сервиса - полная остановка и пересчет конфигурации перед запуском - если ошибка, не запускается;

---------------------------------
Устновка nginx из исходных кодов:
---------------------------------
  1. Обновляем пакеты deb и устнавливаем средства компиляции исходников в бинарники:
    sudo apt install build-essential
  2. Скачаем исходный код nginx с сайта https://www.nginx.com/:
    wget https://nginx.org/download/nginx-1.21.0.tar.gz
  3. Распаковываем архив;
  4. Устанавливаем зависимости:
    sudo apt install libpcre3 libpcre3-dev libpcrecpp0v5 libssl-dev zlib1g-dev
  5. Переходим в распакованную директорию и запускаем файл конфигурации с параметрами 
    список параметров можно посмотреть: https://www.nginx.com/resources/wiki/start/topics/tutorials/installoptions/
      список модулей и ключи для их добавления можно посмотреть на странице https://www.nginx.com/resources/wiki/modules/index.html:
      
    sudo ./configure --sbin-path=/usr/bin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=var/log/nginx/access.log --with-debug --with-pcre --with-http_ssl_module
  6. запускаем сборку:
    sudo make
  7. Запускаем установку:
    sudo make install

// по внешнему ip адресу можно посмотреть страницу nginx по умолчанию;
// конф. файлы хранятся в /etc/nginx;

----------------------------------------------
Добавление собранного вручную nginx в сервисы:
----------------------------------------------
// Создаем init-скрипт для nginx
// можно скачать готовый с https://www.nginx.com/resources/wiki/start/topics/examples/initscripts/
// либо на странице проекта Google: https://code.google.com/archive/p/nginx-init-ubuntu/
// или с репозитория проекта на github https://raw.githubusercontent.com/JasonGiedymin/nginx-init-ubuntu/master/nginx

cd /etc/init.d/								# переходим в папку скриптов и сервисов линукса;
wget https://github.com/JasonGiedymin/nginx-init-ubuntu/blob/master/nginx   # скачиваем файл скрипта в /etc/init.d/;
sudo chmod +x nginx							# делаем файл скрипта исполняемым;
update-rc.d -f nginx defaults						# обновляем список сервисов - что бы ОС увидила новый сервис;

// добавляем переменные, необходимые для запуска nginx (которые читает nginx скрипт) в /etc
  echo "NGINX_CONF_FILE=/etc/nginx/nginx.conf" > /etc/default/nginx
  echo "DAEMON=/usr/bin/nginx" >> /etc/default/nginx

----------------------------------------
Управление nginx собранного вручную:
----------------------------------------
service nginx status
-//- -//- start
-//- -//- stop
-//- -//- reload
-//- -//- restart  

------------------------------------
Обновление nginx собранного вручную:
------------------------------------
Проверяем что сервис запущен

1. Скачаем исходный код nginx с сайта https://www.nginx.com/:
    wget https://nginx.org/download/nginx-НОВАЯ_ВЕРСИЯ.tar.gz

2. Распаковываем архив;

3. Переходим в распакованную директорию и запускаем файл конфигурации с параметрами
	(желательно с теми же, с которыми устанавливали предыдущую версию).
	sudo ./configure КЛЮЧИ
4. sudo make
	sudo make install

-----------------------
Конфигурация (Термины):
-----------------------
  1. Директивы (Directives) - конкретные опции указанные в файлах конфигурации:
    имя_опции значение_опции;   # символ ";" - обязателен после значения опции;
  
  2. Контексты (Contexts) - разделы в файлах конфигурации в которых могут использоваться директивы:
    имя_контекста {
      имя_опции значение_опции;
      имя_вложенного_контекста {
        имя_опции значение_опции;
      }
    }
  
  3. Основные контексты:
    // Файл конфигурации - основной контекст, в котором настраиваются опции для мастер-процессов:
      worker_processes 1;
      
    // Опции HTTP:
      http {
        ...;
        server {      // Эквивалент Apache VirtualHost
          ...;
          location {  // конфигурация в зависимости от URI-запроса
            ....;
          }
          location {
          ....;
          }
        }


---------------------------------
НАСЛЕДОВАНИЕ И ТРИ ТИПА ДИРЕКТИВ:
---------------------------------

В nginx наследование идет (в основном) напрямую от родительского контекста к контексту-потомку.

Порядок наследования:
	HTTP => SERVER => LOCATION

!!! Наследование не всегда идет на прямую - это зависит от директивы!!!

Основные типы директив:
	- Стандартные:
		Определяются только один раз и наследуется всеми элементами после неё.
		Может быть переопределен на нижнем уровне;
		
		КЛЮЧ ЗНАЧЕНИЕ;

	- Массивы:
		На одном уровне их можно переопределять с разными значениями (массив значений);
		Например директива с параметрами хранения логов в разных директориях с разным уровнем логирования;
		Переопределение на нижестоящем уровне выполняется полностью для всего массива!!! 

		КЛЮЧ_1 ЗНАЧЕНИЕ_1;
		КЛЮЧ_1 ЗНАЧЕНИЕ_2;
		КЛЮЧ_1 ЗНАЧЕНИЕ_n. 
		
	- Действия:
		При их вызове выполняют определенные действия (в основном модификацию)с данными (как правило в запросе или ответе).
		!!!Наследование в директивах действия не работает!!!

	+ Доп. директива "try_files".
		Указывает - что нужно искать указанный в uri контент и что нужно делать, если указанный файл не будет обнаружен.
		Может иметь неограниченное количество опций:
			try_files $uri ОПЦИЯ_1 ОПЦИЯ_2 ... ОПЦИЯ_n
		!!!Опции выполняются последовательно (как условия)!!!
		!!!Ненаследуется!!!


----------
ДИРЕКТИВЫ:
----------
---
*** index
	Синтаксис:
		index файл ...;
	Умолчание:	
		index index.html;
	Контекст:
		http, server, location

Определяет файлы, которые будут использоваться в качестве индекса.
В имени файла можно использовать переменные.
Наличие файлов проверяется в порядке их перечисления.
В конце списка может стоять файл с абсолютным путём. Пример:
	index index.$geo.html index.0.html /index.html;

Необходимо иметь в виду, что при использовании индексного файла
	делается внутреннее перенаправление и запрос может быть обработан уже в другом location’е.
Например, в такой конфигурации:

=======
	location = / {
    	index index.html;
	}

	location / {
	    ...
	}
=======

	запрос “/” будет фактически обработан во втором location’е как “/index.html”.

---

       
---------------------------------------------
МИНИМАЛЬНЫЕ НАСТРОЙКИ ГЛАВНОЙ СТРАНИЦЫН NGINX
---------------------------------------------
// Главный конфигурационный файл:
  /etc/nginx/nginx.conf
  
===========
  events {}

http {

	types {
		text/html html;				# воспроизводим все файлы с расширением html как html - а не текст (указывается mime.types);
		text/css css;
	}							# Internet Media Types, также MIME-типы — типы данных, которые могут быть переданы посредством сети Интернет с применением стандарта MIME.
									# В header страницы указан в параметре: "Content-Type"
									# https://ru.wikipedia.org/wiki/Список_MIME-типов#text
									- application;
									- audio;
									- example;
									- image;
									- message;
									- model;
									- multipart;
									- text;
									- video.
								# Список предусмотренных nginx mime.types можно посмотреть в файле /etc/nginx/mime.types
	
							### Либо вместо контекста types вставляем директиву:
	
	include mime.types;				#Ссылка на внутренний в nginx файл с перечнем mime.types, можно указать эту директиву вместо контекста "types"!!!
    
    server {

        listen 80;  					# слушать 80 порт;
        server_name 84.201.142.182;			# ip адрес сервера nginx (или сайта);
        root /sites/html-simple-personal-website-master	# корневая директория сайта;
        
    }
}
===========
  
---------------
БЛОКИ LOCATION:
---------------

Location - блок в конфигурации nginx, где указывается поведение при посещении конкретных URI/запросах.

Существует несколько способов (методов) сопоставления URI в блоках location:

1. Совпадение префикса - если в URI есть /ПРЕФИКС_URI, то location содержащий его будет отрабатывать во всех адресах, в которых он содержится.
	Например - URI/ПРЕФИКС/ЧТО_УГОДНО,ИЛИ_НИЧЕГО:

=========

http {
	...
	server {
		location /ПРЕФИКС {
			ДЕЙСТВИЕ_ОТВЕТ				# например: return 200 'Hello from NGINX block location!';
 
		}
	
	}

}

========	

2. Полное совпадение префикса (все что после префикса - не будет открываться (404 )):
	...
	location = /ПРЕФИКС {;}

3. Совпадение URI с регулярными выражениями.
В качестве модификатора совпадения используется знак "~":
	...
	location ~ /ПРЕФИКС_REGEX {;}

!!!Метод чувствителен к регистру - для выключения чувствительности вместо "~" указываем "~*"


4. Более высокий приоритет данного location чем c "~", иначе - "~" приоритетнее чем "=":
	...
	location ^~ /ПРЕФИКС {;}


Приоритетность модификаторов:

	=
	^~
	~ & ~*
	prefix_match


Нестандартное (ненаследуемое) размещение отдельных страниц (контента):

1. Если в ссылке-запросе указывается файл, который хотят получить, из директории, где много файлов:

=======
	location /ПРЕФИКС {
		
		root /ПАПКА_ГДЕ_ФАЙЛЫ;			# где искать файлы ответа
		try_files $uri =404;			# собственно, говорит nginx искать файлы ответов в указанной выше папке		

	}

=======
$uri - стандартная переменная ninx:
	текущий URI запроса в нормализованном виде.

--------------------
ЛОГИРОВАНИЕ в NGINX:
--------------------
По умолчанию логи хранятся в директории:
/var/log/nginx/

В nginx существует 2 типа логов:
- ошибок (error.log);
- доступа. Содержат информацию обо все запросах к серверу (access.log).

Логирование запускается автоматически, однако его можно отключить или настроить по своим предпочтениям.
Во время первоначальной настройки nginx мы указывали параметры:

--error-log-path
	Задаёт имя основного файла ошибок, предупреждений и диагностики.
	После установки имя файла можно всегда поменять в конфигурационном файле nginx.conf с помощью директивы error_log.
	По умолчанию имя файла — префикс/logs/error.log.

--http-log-path
	Задаёт имя основного файла регистрации запросов HTTP-сервера.
	После установки имя файла можно всегда поменять в конфигурационном файле nginx.conf с помощью директивы access_log.
	По умолчанию имя файла — префикс/logs/access.log.
	
--with-debug
	Разрешает отладочный лог.
	
--with-pcre
	Задаёт путь к исходным текстам библиотеки PCRE.
	Дистрибутив библиотеки нужно взять на сайте PCRE и распаковать.
	Всё остальное сделают ./configure nginx’а и make.
	Библиотека нужна для использования регулярных выражений в директиве location и для модуля ngx_http_rewrite_module.
	
--with-http_ssl_module
	Разрешает сборку модуля для работы HTTP-сервера по протоколу HTTPS.
	По умолчанию модуль не собирается.
	Для сборки и работы этого модуля нужна библиотека OpenSSL.

Настройки в nginx.conf:
-----------------------
Синтаксис:
	error_log файл [уровень];
Умолчание:	
	error_log logs/error.log error;
Контекст:
	main, http, mail, stream, server, location


Конфигурирует запись в лог. На одном уровне конфигурации может использоваться несколько логов.
Если на уровне конфигурации main запись лога в файл явно не задана, то используется файл по умолчанию.

Первый параметр задаёт файл, который будет хранить лог.
Специальное значение stderr выбирает стандартный файл ошибок.
Запись в syslog настраивается указанием префикса “syslog:”.
Запись в кольцевой буфер в памяти настраивается указанием префикса “memory:” и размера буфера и как правило используется для отладки.

Второй параметр определяет уровень лога и может принимать одно из следующих значений:
	debug, info, notice, warn, error, crit, alert или emerg.
Уровни лога, указанные выше, перечислены в порядке возрастания важности.
При установке определённого уровня в лог попадают все сообщения указанного уровня и уровней большей важности.
Например, при стандартном уровне error в лог попадают сообщения уровней
	error, crit, alert и emerg.
Если этот параметр не задан, используется error.

Для работы уровня лога debug необходимо сконфигурировать nginx с --with-debug.

Уменьшение (отключение) количества логов в определенных location,
Например - запросы от браузера (статические данные):

	location ИМЯ {
		access_log off;
		error_log off;
	} 



------------------
НАСТРОЙКИ BACKEND:
------------------
Настройки необходимые для взаимодействия с серверными языками программирования.

 и 

Установка php-fpm:
------------------

#Установка 5 версии php, и его модулей fpm, mysql и cgi из репозиторием ubuntu:
	apt install php5-fpm php5-mysql php5 php5-cgi -y		#Задан порядок установки пакетов!!!;



Настройка nginx как прокси-сервера между php-fpm и клиентом:
------------------------------------------------------------

### для теста нужно скачать Wordpress в директорию /sites


# Правим nginx.conf:

==========
# в server добавляем:
	index index.php index.html;
# меняем:
	root /sites/wordpress;

# Добавляем:
	
	location / {
		try_files $uri $uri/ /index.php?$args;	
	}

	location ~ \.php$ {
		
		include fatscgi_params;
		include fastcgi.conf;
		
		fastcgi_pass 127.0.0.1:9000;
	}


# Добавляем еще один location:
	location 


==========
# Проверяем
	/etc/php5/fpm/php-fpm.conf

!!! Но изменения вносим в:
	/etc/php5/fpm/pool.d/www.conf

# В значении параметра "listen" указывается сколько что "слушает" php-fpm.
	По умолчанию слушает unix сокет:
		listen = /var/run/php5-fpm.sock
	Нужно заменить на TCP порт указанный в nginx.conf:
		listen = 127.0.0.1:9000
	Перезапускаем сервис php-fpm:
		service php-fpm restart
	Перезапустим сервис  nginx
  
--------------------------------
Ошибки и важные сообщения nginx:
--------------------------------
404 - неверный uri/запрос. Нет location сопоставленного введенному uri/запросу. !!!Это не ошибка, и сообщения с данным кодом помещаются в access.log 


--------
СПРАВКА:
--------

#Справка по настройкам в 	nginx.conf:
https://nginx.org/ru/docs/ngx_core_module.html

#Справка по уровням логирования ошибок:
https://nginx.org/ru/docs/ngx_core_module.html#error_log

--------
СЛОВАРЬ:
--------

PCRE
	- регулярные выражения совместимых с Perl (Perl compatible regular expressions — PCRE).
	Регулярные выражения представляют собой строку, которая начинается с символа разделителя,
		за которым следует непосредственно регулярное выражение,
		затем еще один символ разделителя и потом необязятельный список модификаторов.
***